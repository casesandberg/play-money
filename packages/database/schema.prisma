generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextIndex"]
}

generator zod {
  provider          = "zod-prisma-types"
  relationModel     = "default"
  output            = "./zod"
  useMultipleFiles  = true
  createInputTypes  = false
  createOutputTypes = false
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String             @id @default(cuid())
  username         String             @unique
  displayName      String
  avatarUrl        String?
  twitterHandle    String?
  discordHandle    String?
  website          String?
  bio              String?
  timezone         String             @default("America/Los_Angeles")
  authAccounts     AuthAccount[]
  sessions         Session[]
  comments         Comment[]
  commentReactions CommentReaction[]
  resolvedMarkets  MarketResolution[]
  markets          Market[]
  cancelledMarkets Market[]           @relation("MarketCanceledBy")
  primaryAccountId String             @unique
  primaryAccount   Account            @relation("UserPrimaryAccount", fields: [primaryAccountId], references: [id])
  accounts         Account[]
  transactions     Transaction[]
  role             UserRole           @default(USER)
  referralCode     String?            @unique
  referredBy       String?
  referredUsers    User[]             @relation("Referrals")
  referrer         User?              @relation("Referrals", fields: [referredBy], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  email         String    @unique /// @zod.custom.omit([model, input])
  emailVerified DateTime? /// @zod.custom.omit([model, input])

  // Unnecessary reverse relations
  recipientNotifications Notification[]      @relation("NotificationRecipient")
  actorNotifications     Notification[]      @relation("NotificationActor")
  notificationGroups     NotificationGroup[] @relation()

  createdLists List[]   @relation("ListCreator")
  apiKeys      ApiKey[]
}

model AuthAccount {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Market {
  id                String                 @id @default(cuid())
  question          String /// @zod.string.trim().min(1, { message: "Question is required" })
  description       String
  slug              String /// @zod.string.min(1, { message: "Slug is required" })
  closeDate         DateTime?
  resolvedAt        DateTime?
  canceledAt        DateTime?
  canceledById      String?
  canceledBy        User?                  @relation("MarketCanceledBy", fields: [canceledById], references: [id])
  transactions      Transaction[]
  createdBy         String
  tags              String[]               @default([]) /// @zod.string.trim().array(.max(5))
  user              User                   @relation(fields: [createdBy], references: [id])
  ammAccountId      String                 @unique
  ammAccount        Account                @relation("MarketAMMAccount", fields: [ammAccountId], references: [id])
  clearingAccountId String                 @unique
  clearingAccount   Account                @relation("MarketClearingAccount", fields: [clearingAccountId], references: [id])
  accounts          Account[]              @relation("MarketAccounts")
  options           MarketOption[]         @relation()
  marketResolution  MarketResolution?
  balances          Balance[]
  positions         MarketOptionPosition[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Cached values
  commentCount         Int?
  uniqueTradersCount   Int?
  uniquePromotersCount Int?
  liquidityCount       Int?

  // Unnecessary reverse relations
  notifications Notification[] @relation()

  lists MarketList[]

  parentListId String?
  parentList   List?   @relation("ParentListMarkets", fields: [parentListId], references: [id])
}

model MarketResolution {
  id             String       @id @default(cuid())
  marketId       String       @unique
  market         Market       @relation(fields: [marketId], references: [id], onDelete: Cascade)
  resolvedById   String
  resolvedBy     User         @relation(fields: [resolvedById], references: [id], onDelete: Cascade)
  resolutionId   String
  resolution     MarketOption @relation(fields: [resolutionId], references: [id], onDelete: Cascade)
  supportingLink String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model MarketOption {
  id                   String                 @id @default(cuid())
  name                 String /// @zod.string.trim().min(1, { message: "Name is required" })
  marketId             String
  market               Market                 @relation(fields: [marketId], references: [id])
  color                String                 @default("#FF00FF") /// @zod.string.regex(/^#[0-9A-Fa-f]{6}$/)
  liquidityProbability Decimal                @default(0.5)
  resolutions          MarketResolution[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  positions            MarketOptionPosition[]
  transactions         Transaction[]

  // Cached values
  probability Int?

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum CommentEntityType {
  MARKET
  LIST
}

model Comment {
  id         String            @id @default(cuid())
  content    String /// @zod.string.trim().min(1).max(5000)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime?         @updatedAt
  edited     Boolean           @default(false)
  author     User              @relation(fields: [authorId], references: [id])
  authorId   String
  parentId   String?
  parent     Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]         @relation("CommentReplies")
  reactions  CommentReaction[]
  hidden     Boolean           @default(false)
  entityType CommentEntityType
  entityId   String

  // Unnecessary reverse relations
  notifications       Notification[] @relation("NotificationComment")
  notificationParents Notification[] @relation("NotificationParentComment")
}

model CommentReaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

enum TransactionType {
  TRADE_BUY
  TRADE_SELL
  TRADE_WIN
  TRADE_LOSS

  CREATOR_TRADER_BONUS

  LIQUIDITY_INITIALIZE
  LIQUIDITY_DEPOSIT
  LIQUIDITY_WITHDRAWAL
  LIQUIDITY_RETURNED
  LIQUIDITY_VOLUME_BONUS

  DAILY_TRADE_BONUS
  DAILY_MARKET_BONUS
  DAILY_COMMENT_BONUS
  DAILY_LIQUIDITY_BONUS

  HOUSE_GIFT
  HOUSE_SIGNUP_BONUS

  REFERRER_BONUS
  REFERREE_BONUS
}

model Transaction {
  id          String             @id @default(cuid())
  type        TransactionType
  entries     TransactionEntry[]
  initiatorId String?
  initiator   User?              @relation(fields: [initiatorId], references: [id])
  isReverse   Boolean?
  reverseOfId String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  batchId     String?
  batch       TransactionBatch?  @relation(fields: [batchId], references: [id])
  marketId    String?
  market      Market?            @relation(fields: [marketId], references: [id])
  options     MarketOption[]

  // Unnecessary reverse relations
  notifications Notification[] @relation()
}

model TransactionBatch {
  id           String        @id @default(cuid())
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum AssetType {
  CURRENCY
  MARKET_OPTION
}

model TransactionEntry {
  id            String      @id @default(cuid())
  amount        Decimal
  assetType     AssetType
  assetId       String
  fromAccountId String
  fromAccount   Account     @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccountId   String
  toAccount     Account     @relation("ToAccount", fields: [toAccountId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  createdAt     DateTime    @default(now())
}

enum AccountType {
  USER
  MARKET_AMM
  MARKET_CLEARING
  HOUSE
}

model Account {
  id             String                 @id @default(cuid())
  type           AccountType
  internalType   String?                @unique
  userId         String?
  user           User?                  @relation(fields: [userId], references: [id])
  userPrimary    User?                  @relation("UserPrimaryAccount")
  ammMarket      Market?                @relation("MarketAMMAccount")
  clearingMarket Market?                @relation("MarketClearingAccount")
  marketId       String?
  market         Market?                @relation("MarketAccounts", fields: [marketId], references: [id])
  fromEntries    TransactionEntry[]     @relation("FromAccount")
  toEntries      TransactionEntry[]     @relation("ToAccount")
  balances       Balance[]
  positions      MarketOptionPosition[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model Balance {
  id        String    @id @default(cuid())
  accountId String
  account   Account   @relation(fields: [accountId], references: [id])
  assetType AssetType
  assetId   String
  total     Decimal
  subtotals Json
  marketId  String?
  market    Market?   @relation(fields: [marketId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index(fields: [accountId, assetType, assetId, marketId])
}

model MarketOptionPosition {
  id        String       @id @default(cuid())
  accountId String
  account   Account      @relation(fields: [accountId], references: [id])
  marketId  String
  market    Market       @relation(fields: [marketId], references: [id])
  optionId  String
  option    MarketOption @relation(fields: [optionId], references: [id])
  cost      Decimal
  quantity  Decimal
  value     Decimal
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique(fields: [accountId, optionId])
  @@index(fields: [accountId, optionId])
}

enum NotificationType {
  MARKET_RESOLVED
  MARKET_CANCELED
  MARKET_TRADE
  MARKET_LIQUIDITY_ADDED
  MARKET_COMMENT
  LIST_COMMENT
  LIST_MARKET_ADDED
  COMMENT_REPLY
  COMMENT_MENTION
  COMMENT_REACTION
  REFERRER_BONUS
}

model Notification {
  id                 String            @id @default(cuid())
  recipientId        String
  recipient          User              @relation("NotificationRecipient", fields: [recipientId], references: [id])
  actorId            String
  actor              User?             @relation("NotificationActor", fields: [actorId], references: [id])
  type               NotificationType
  content            Json
  marketId           String?
  market             Market?           @relation(fields: [marketId], references: [id])
  marketOptionId     String?
  marketOption       MarketOption?     @relation(fields: [marketOptionId], references: [id])
  marketResolutionId String?
  marketResolution   MarketResolution? @relation(fields: [marketResolutionId], references: [id])
  transactionId      String?
  transaction        Transaction?      @relation(fields: [transactionId], references: [id])
  listId             String?
  list               List?             @relation(fields: [listId], references: [id])
  commentId          String?
  comment            Comment?          @relation("NotificationComment", fields: [commentId], references: [id])
  parentCommentId    String?
  parentComment      Comment?          @relation("NotificationParentComment", fields: [parentCommentId], references: [id])
  commentReactionId  String?
  commentReaction    CommentReaction?  @relation(fields: [commentReactionId], references: [id])

  actionUrl String
  readAt    DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  groups    NotificationGroup[] @relation()

  @@index(fields: [recipientId, createdAt])
}

model NotificationGroup {
  id                 String           @id @default(cuid())
  recipientId        String
  recipient          User             @relation(fields: [recipientId], references: [id])
  type               NotificationType
  count              Int              @default(1)
  lastNotificationId String
  lastNotification   Notification     @relation(fields: [lastNotificationId], references: [id])
  groupWindowEnd     DateTime
  groupKey           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique(fields: [recipientId, type, groupWindowEnd, groupKey])
  @@index(fields: [recipientId, type, groupWindowEnd, groupKey])
}

enum QuestionContributionPolicy {
  DISABLED
  OWNERS_ONLY
  FRIENDS_ONLY
  PUBLIC
}

model List {
  id                 String                     @id @default(cuid())
  title              String /// @zod.string.trim().min(1, { message: "Title is required" })
  slug               String /// @zod.string.min(1, { message: "Slug is required" })
  description        String?
  ownerId            String
  owner              User                       @relation("ListCreator", fields: [ownerId], references: [id])
  contributionPolicy QuestionContributionPolicy @default(OWNERS_ONLY)
  contributionReview Boolean?                   @default(false)
  tags               String[]                   @default([]) /// @zod.string.trim().array(.max(5))
  markets            MarketList[]
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt

  // New relation for parent markets
  childrenMarkets Market[] @relation("ParentListMarkets")

  // Unnecessary reverse relations
  notifications Notification[] @relation()

  @@index([ownerId])
}

model MarketList {
  id        String   @id @default(cuid())
  listId    String
  list      List     @relation(fields: [listId], references: [id])
  marketId  String
  market    Market   @relation(fields: [marketId], references: [id])
  createdAt DateTime @default(now())

  @@unique([listId, marketId])
  @@index([listId])
  @@index([marketId])
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String /// @zod.string.trim().min(1, { message: "Name is required" })
  key        String    @unique
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime?
  isRevoked  Boolean   @default(false)

  @@index([key])
  @@index([userId])
}
